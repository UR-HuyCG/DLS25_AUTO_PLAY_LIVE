import os
import time
import cv2
import numpy as np
import pyautogui
import win32gui
import win32ui
import win32api
import win32con
from ctypes import windll
import win32process

# === Config ===
IMAGE_FOLDER = 'imagesDLS'  # ch·ª©a START_LIVE.png, CONTINUE.png,...
CONFIDENCE = 0.71
CONFIDENCE_A_BUTTON = 0.5  # confidence cho A_BUTTON
WAIT_TIME = 1.0
OPTION_CLICK = 3  # 1: click A_BUTTON, 2: click ƒê√öP v·ªã tr√≠ ·∫£o, 3: kh√¥ng click g√¨
pyautogui.FAILSAFE = False

def get_ldplayer_hwnd():
    hwnd = win32gui.FindWindow(None, None)
    while hwnd:
        title = win32gui.GetWindowText(hwnd)
        if "LDPlayer" in title:
            print(f"‚úÖ ƒê√£ t√¨m th·∫•y c·ª≠a s·ªï LDPlayer: {title}")
            return hwnd
        hwnd = win32gui.GetWindow(hwnd, 2)
    print("‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï LDPlayer")
    return None

def capture_window(hwnd):
    left, top, right, bottom = win32gui.GetWindowRect(hwnd)
    width = right - left
    height = bottom - top

    hwndDC = win32gui.GetWindowDC(hwnd)
    mfcDC  = win32ui.CreateDCFromHandle(hwndDC)
    saveDC = mfcDC.CreateCompatibleDC()
    saveBitMap = win32ui.CreateBitmap()
    saveBitMap.CreateCompatibleBitmap(mfcDC, width, height)
    saveDC.SelectObject(saveBitMap)

    result = windll.user32.PrintWindow(hwnd, saveDC.GetSafeHdc(), 1)
    bmpinfo = saveBitMap.GetInfo()
    bmpstr = saveBitMap.GetBitmapBits(True)
    img = np.frombuffer(bmpstr, dtype='uint8')
    img.shape = (height, width, 4)

    win32gui.DeleteObject(saveBitMap.GetHandle())
    saveDC.DeleteDC()
    mfcDC.DeleteDC()
    win32gui.ReleaseDC(hwnd, hwndDC)

    if result == 1:
        return img[..., :3]
    else:
        return None

def is_ldplayer_foreground(hwnd):
    """Ki·ªÉm tra xem LDPlayer c√≥ ƒëang l√† c·ª≠a s·ªï foreground kh√¥ng"""
    return win32gui.GetForegroundWindow() == hwnd

def resize_template_to_fit(template, screenshot):
    """Resize ·∫£nh m·∫´u n·∫øu n√≥ l·ªõn h∆°n ·∫£nh ch·ª•p m√†n h√¨nh"""
    if template.shape[0] > screenshot.shape[0] or template.shape[1] > screenshot.shape[1]:
        ratio_h = screenshot.shape[0] / template.shape[0]
        ratio_w = screenshot.shape[1] / template.shape[1]
        ratio = min(ratio_h, ratio_w)
        new_size = (int(template.shape[1] * ratio), int(template.shape[0] * ratio))
        resized_template = cv2.resize(template, new_size)
        print(f"üîß Resize ·∫£nh m·∫´u c√≤n {resized_template.shape[1]}x{resized_template.shape[0]}")
        return resized_template
    return template

def find_and_click_cv2(image_name, hwnd):
    image_path = os.path.join(IMAGE_FOLDER, image_name)
    template = cv2.imread(image_path)

    if template is None:
        print(f"‚ö†Ô∏è Kh√¥ng load ƒë∆∞·ª£c ·∫£nh m·∫´u: {image_path}")
        return False

    screenshot = capture_window(hwnd)
    if screenshot is None:
        print("‚ùå Kh√¥ng ch·ª•p ƒë∆∞·ª£c c·ª≠a s·ªï LDPlayer.")
        return False

    template = resize_template_to_fit(template, screenshot)
    res = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)
    _, max_val, _, max_loc = cv2.minMaxLoc(res)
    print(f"üîç So kh·ªõp {image_name} = {max_val:.2f}")

    match_threshold = CONFIDENCE_A_BUTTON if image_name == "A_BUTTON.png" else CONFIDENCE

    if max_val >= match_threshold:
        if not is_ldplayer_foreground(hwnd):
            print(f"‚õî LDPlayer kh√¥ng ph·∫£i c·ª≠a s·ªï foreground, b·ªè qua click {image_name}")
            return None  # Gi√° tr·ªã ƒë·∫∑c bi·ªát ƒë·ªÉ v√≤ng for bi·∫øt d·ª´ng l·∫°i
        left, top, _, _ = win32gui.GetWindowRect(hwnd)
        center_x = left + max_loc[0] + template.shape[1] // 2
        center_y = top + max_loc[1] + template.shape[0] // 2
        pyautogui.click(center_x, center_y)
        print(f"üñ±Ô∏è Click {image_name} t·∫°i ({center_x}, {center_y}) (match: {max_val:.2f})")
        return True
    else:
        if is_ldplayer_foreground(hwnd):  # ch·ªâ in l·ªói n·∫øu ƒëang foreground
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y {image_name} (match: {max_val:.2f})")
        return False


def find_cv2(image_name, hwnd):
    image_path = os.path.join(IMAGE_FOLDER, image_name)
    template = cv2.imread(image_path)

    if template is None:
        print(f"‚ö†Ô∏è Kh√¥ng load ƒë∆∞·ª£c ·∫£nh m·∫´u: {image_path}")
        return False

    screenshot = capture_window(hwnd)
    if screenshot is None:
        print("‚ùå Kh√¥ng ch·ª•p ƒë∆∞·ª£c c·ª≠a s·ªï LDPlayer.")
        return False

    template = resize_template_to_fit(template, screenshot)

    res = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)
    _, max_val, _, _ = cv2.minMaxLoc(res)
    #print(f"üîç So kh·ªõp {image_name} = {max_val:.2f}")

    return max_val >= CONFIDENCE

import time

def click_relative(hwnd, rel_x, rel_y): #click ƒë√∫p
    if not is_ldplayer_foreground(hwnd):
        print(f"‚õî LDPlayer kh√¥ng ph·∫£i foreground, b·ªè qua click ƒë√∫p")
        return

    left, top, right, bottom = win32gui.GetWindowRect(hwnd)
    width = right - left
    height = bottom - top
    abs_x = int(left + width * rel_x)
    abs_y = int(top + height * rel_y)
    
    for _ in range(2):
        pyautogui.click(abs_x, abs_y)
        time.sleep(0.2)  # delay nh·ªè gi·ªØa 2 l·∫ßn click

    print(f"üñ±Ô∏è Click ƒë√∫p t·∫°i ({abs_x}, {abs_y})")
    print("üëâ ƒê√£ click v√†o v·ªã tr√≠ ·∫£o thay cho n√∫t A")



def auto_play_live():
    print("üöÄ B·∫Øt ƒë·∫ßu auto LIVE...")
    hwnd = get_ldplayer_hwnd()
    if not hwnd:
        return

    while True:
        # ===== B∆Ø·ªöC 1: START LIVE =====
        while True:
            if find_and_click_cv2("START_LIVE_2.png", hwnd):
                if find_and_click_cv2("NEW_EXIT_AD.png", hwnd):
                    print("üö´ ƒê√£ t·∫Øt qu·∫£ng c√°o")                 #check dp boot
                    time.sleep(1)
                    find_and_click_cv2("START_LIVE_2.png", hwnd)
                print("‚û°Ô∏è ƒê√£ click START_LIVE_2.png")
                time.sleep(2)
                find_and_click_cv2("START_LIVE.png", hwnd)
                break
            elif find_and_click_cv2("START_LIVE.png", hwnd):
                if find_and_click_cv2("NEW_EXIT_AD.png", hwnd):
                    print("üö´ ƒê√£ t·∫Øt qu·∫£ng c√°o")               #check dp boot
                    time.sleep(1)
                    find_and_click_cv2("START_LIVE_2.png", hwnd)
                print("‚û°Ô∏è ƒê√£ click START_LIVE.png")
                break
            else:
                print("‚ö†Ô∏è Ch∆∞a th·∫•y START_LIVE n√†o, H√ÉY M·ªû LDPLAYER ho·∫∑c th·ª≠ l·∫°i sau 5s...")
                time.sleep(5)

        print("üöÄ ƒê√£ click START LIVE")
        time.sleep(10)
        print("üéÆ B·∫Øt ƒë·∫ßu spam trong tr·∫≠n ƒë·∫•u...")
        if find_cv2("FAILED_TO_CONNECT.png", hwnd):
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi, tho√°t...")
            find_and_click_cv2("OK_FAILED_TO_CONNECT.png", hwnd)
            time.sleep(2)
            if find_and_click_cv2("NEW_EXIT_AD.png", hwnd):
             print("üö´ ƒê√£ t·∫Øt qu·∫£ng c√°o")
             time.sleep(3)
            continue
        if find_and_click_cv2("YOU_WERE_DISCONNECTED.png", hwnd):
            print("‚ùå L·ªói k·∫øt n·ªëi, tho√°t...")
            time.sleep(2)
            if find_and_click_cv2("NEW_EXIT_AD.png", hwnd):
             print("üö´ ƒê√£ t·∫Øt qu·∫£ng c√°o")
             time.sleep(3)
            continue
        # ===== B∆Ø·ªöC 1.5: Li√™n t·ª•c ·∫•n A_BUTTON cho ƒë·∫øn khi th·∫•y n√∫t HIGHLIGHTS ho·∫∑c c√°c tr·∫°ng th√°i ƒë·∫∑c bi·ªát =====
        while True:
            if find_cv2("MVP_PLAYER.png", hwnd):
                print("üéÅ ƒê√£ ph√°t hi·ªán n√∫t HIGHLIGHTS! B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ti·∫øp...")
                break

            if find_cv2("MATCH_END_EARLY.png", hwnd):
                find_and_click_cv2("OK_MATCH_END_EARLY.png", hwnd)
                time.sleep(3)
                print("‚û°Ô∏è ƒê√£ x·ª≠ l√Ω MATCH END EARLY (thua 10-0)")
                break

            if find_cv2("OPPONENT_DISCONNECTED.png", hwnd):
                find_and_click_cv2("OK_OPPONENT_DISCONNECTED.png", hwnd)
                time.sleep(3)
                print("‚û°Ô∏è ƒê√£ x·ª≠ l√Ω OPPONENT DICONNECTED (ƒë·ªëi th·ªß tho√°t)")
                break
            
            if find_cv2("OPPONENT_CONCEDED.png", hwnd):
                find_and_click_cv2("OK_OPPONENT_CONCEDED.png", hwnd)
                time.sleep(3)
                print("‚û°Ô∏è ƒê√£ x·ª≠ l√Ω OPPONENT CONCEDED (ƒë·ªëi th·ªß b·ªè game)")
                break
            
            if (OPTION_CLICK==1) :
                # N·∫øu kh√¥ng th·∫•y c√°c tr·∫°ng th√°i ƒë·∫∑c bi·ªát, ti·∫øp t·ª•c spam A_BUTTON
                # N·∫øu kh√¥ng th·∫•y c√°c tr·∫°ng th√°i ƒë·∫∑c bi·ªát, ti·∫øp t·ª•c spam A_BUTTON
                for i in range(1, 7):
                    result = find_and_click_cv2(f"A_BUTTON_{i}.png", hwnd)
                    if result:  # True nghƒ©a l√† ƒë√£ click
                        break
                    elif result is None:
                        break  # foreground kh√¥ng ƒë√∫ng, d·ª´ng lu√¥n kh√¥ng check ti·∫øp
                else:
                    print("‚ùå Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ A_BUTTON n√†o.")
                time.sleep(2)
            if (OPTION_CLICK==2):
                click_relative(hwnd, 0.5, 0.2)  # click v√†o CH√çNH GI·ªÆA
                time.sleep(0.2)  # delay nh·ªè gi·ªØa c√°c l·∫ßn click
            
            if (OPTION_CLICK==3):
                pass
                time.sleep(6)

        print("üéÅ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω continue...")

        # ===== B∆Ø·ªöC 2: CONTINUE L·∫¶N 1 =====
        while not find_and_click_cv2("CONTINUE.png", hwnd):  # L·∫∑p l·∫°i n·∫øu kh√¥ng t√¨m th·∫•y CONTINUE
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y CONTINUE, th·ª≠ l·∫°i sau 4s...")
            time.sleep(5)

        print("‚û°Ô∏è ƒê√£ click CONTINUE l·∫ßn 1")
        time.sleep(5)

        # ===== B∆Ø·ªöC 3: CONTINUE L·∫¶N 2 =====
        while not find_and_click_cv2("CONTINUE.png", hwnd):
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y CONTINUE, th·ª≠ l·∫°i sau 4s...")
            time.sleep(3)

        print("‚û°Ô∏è ƒê√£ click CONTINUE l·∫ßn 2")
        time.sleep(3)

        # ===== B∆Ø·ªöC 4: X·ª¨ L√ù C√ÅC TR·∫†NG TH√ÅI KH√ÅC =====
        if find_cv2("MATCH_END_EARLY.png", hwnd):
            find_and_click_cv2("OK_MATCH_EARLY.png", hwnd)
            print("‚û°Ô∏è ƒê√£ x·ª≠ l√Ω MATCH END EARLY")
            time.sleep(3)

        if find_cv2("OPPONENT_FORFEIT.png", hwnd):
            find_and_click_cv2("OK_OPPONENT_FORFEIT.png", hwnd)
            print("‚û°Ô∏è ƒê√£ x·ª≠ l√Ω OPPONENT FORFEIT")
            time.sleep(3)
        
        # ===== B∆Ø·ªöC 5: X·ª¨ L√ù CU·ªêI =====
        if find_and_click_cv2("NEW_EXIT_AD.png", hwnd):
            print("üö´ ƒê√£ t·∫Øt qu·∫£ng c√°o")
            time.sleep(1)

        if find_and_click_cv2("NEW_EXIT_AD.png", hwnd):
            print("üö´ ƒê√£ t·∫Øt qu·∫£ng c√°o")
            time.sleep(1)
        if find_cv2("TIER_SUMMARY.png", hwnd):
            find_and_click_cv2("OK_TIER_SUMMARY.png", hwnd)
            print("‚û°Ô∏è ƒê√£ x·ª≠ l√Ω TIER SUMMARY")
            time.sleep(2)
        
        if find_and_click_cv2("NEW_EXIT_AD.png", hwnd):
            print("üö´ ƒê√£ t·∫Øt qu·∫£ng c√°o")
            time.sleep(1)
        

        print("üîÅ V√≤ng ch∆°i k·∫øt th√∫c, b·∫Øt ƒë·∫ßu v√≤ng ti·∫øp theo...\n")
        time.sleep(WAIT_TIME)

        



# === CH·∫†Y ===
if __name__ == "__main__":
    print("üü¢ Tool ƒëang ch·∫°y... (Ctrl+C ƒë·ªÉ d·ª´ng)")
    auto_play_live()